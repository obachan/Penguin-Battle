diff --git a/ClientState.cpp b/ClientState.cpp
index 11bc395..b24105c 100644
--- a/ClientState.cpp
+++ b/ClientState.cpp
@@ -59,14 +59,16 @@ void ClientState::enter()
 	sound_factory = new SoundWrapper();
     sound_factory->playMusic();
 
-	penguin = new Penguin(m_pSceneMgr, NULL, client_controller);				// Create Player 1's Penguin
-	penguin_two = new Penguin(m_pSceneMgr, NULL, client_controller);								// Create Player 2's Penguin
-	ball = new Ball(m_pSceneMgr, NULL, 0, -(room_width/2) + ball_radius, 0);	// Create Ball
-	room = new Room(m_pSceneMgr, NULL);											// Create Room
-	goal = new Goal(m_pSceneMgr, NULL);											// Create Goal
+    worldObjectFactory = new WorldObjectFactory(m_pSceneMgr, NULL);
+
+	penguin = new Penguin(m_pSceneMgr, NULL, client_controller);
+	penguin_two = new Penguin(m_pSceneMgr, NULL, NULL);		
+	ball = new Ball(m_pSceneMgr, NULL, 0, -(room_width/2) + ball_radius, 0);
+	room = new Room(m_pSceneMgr, NULL);
+	goal = worldObjectFactory->createNewGoalClient();
  
- 	penguin->update(0.1f, client_controller, m_pCamera);
-	penguin_two->update(0.1f, client_controller, NULL);
+ 	penguin->update(0.1f, m_pCamera);
+	penguin_two->update(0.1f, NULL);
 	ball->update();
 	
 	sendbuffer[0] = '0';
@@ -204,8 +206,8 @@ void ClientState::update(double timeSinceLastFrame)
 	//ball->update(timeSinceLastFrame);
 	ball->updateAsClient(newballPosition);
 
-	penguin->updateAsClient(newPenguinClientPosition, newPenguinClientQuaternion);
-	penguin_two->updateAsClient(newPenguinServerPosition, newPenguinServerQuaternion);
+	penguin->updateAsClient(newPenguinClientPosition, newPenguinClientQuaternion, m_pCamera);
+	penguin_two->updateAsClient(newPenguinServerPosition, newPenguinServerQuaternion, NULL);
 	
   	// Update Debug Camera
     if(client_controller->debugCameraOn())
@@ -245,7 +247,7 @@ bool ClientState::keyPressed(const OIS::KeyEvent &keyEventRef)
 	// Key Presses to Activate Sound Effect
     if(keyEventRef.key == OIS::KC_SPACE)		sound_factory->playJumpSoundEffect();
 
-	OgreFramework::getSingletonPtr()->debugKeyPressed(keyEventRef, m_pCamera);
+	//OgreFramework::getSingletonPtr()->debugKeyPressed(keyEventRef, m_pCamera);
 
 	return true;
 }
diff --git a/ClientState.hpp b/ClientState.hpp
index 6a1ac01..f484ccd 100644
--- a/ClientState.hpp
+++ b/ClientState.hpp
@@ -34,15 +34,17 @@ public:
 	bool mousePressed(const OIS::MouseEvent &arg, OIS::MouseButtonID id);
 	bool mouseReleased(const OIS::MouseEvent &arg, OIS::MouseButtonID id);
 
-	Ball*			ball;
-	Room*			room;
-	Paddle*			paddle;
-	Penguin*		penguin;
-	Penguin*		penguin_two;
-	Goal*			goal;
+	Ball*				ball;
+	Room*				room;
+	Paddle*				paddle;
+	Penguin*			penguin;
+	Penguin*			penguin_two;
+	Goal*				goal;
 
-	MyController* 	client_controller;
-	SoundWrapper*	sound_factory;	
+	MyController* 		client_controller;
+	SoundWrapper*		sound_factory;
+
+	WorldObjectFactory* worldObjectFactory;
 	
 private:
 	bool						m_bShutdown;
diff --git a/ServerState.cpp b/ServerState.cpp
index ce88201..dacde78 100644
--- a/ServerState.cpp
+++ b/ServerState.cpp
@@ -143,10 +143,7 @@ void ServerState::update(double timeSinceLastFrame)
 	client_controller->boost_control_down = (recvbuffer[7] == '1') ? true : false;
 	
 	world->update(timeSinceLastFrame, server_controller, m_pCamera);		// Update World
-
-	std::cout << "Here ====================================" << std::endl;
-	penguin_two->update(timeSinceLastFrame, client_controller, NULL);
-	std::cout << "Here ====================================" << std::endl;
+	penguin_two->update(timeSinceLastFrame, NULL);
 
 	// Update Debug Camera
     if(server_controller->debugCameraOn())
diff --git a/World.cpp b/World.cpp
index 64010fb..1878c85 100644
--- a/World.cpp
+++ b/World.cpp
@@ -31,7 +31,7 @@ void World::update(double timeSinceLastFrame, MyController* controller, Ogre::Ca
 	}
 
 	/* Update Players */
-	penguin->update(timeSinceLastFrame, controller, camera);
+	penguin->update(timeSinceLastFrame, camera);
 
 	// /* Update World Objects */
 	for(int i=0; i<world_objects.size(); ++i){
diff --git a/WorldObjectFactory.cpp b/WorldObjectFactory.cpp
index 2038dfa..937b80c 100644
--- a/WorldObjectFactory.cpp
+++ b/WorldObjectFactory.cpp
@@ -24,10 +24,18 @@ Ball* WorldObjectFactory::createNewBall(float px, float py, float pz){
 	return Ball::createNewBall(mSceneMgr, mPhysics, Ogre::Vector3(px, py, pz));
 }
 
+Ball* WorldObjectFactory::createNewBallClient(){
+	return Ball::createNewBall(mSceneMgr, NULL, Ogre::Vector3(0, 0, 0));
+}
+
 Room* WorldObjectFactory::createNewRoom(){
 	return new Room(mSceneMgr, mPhysics);
 }
 
+Room* WorldObjectFactory::createNewRoomClient(){
+	return new Room(mSceneMgr, NULL);
+}
+
 // Penguin* WorldObjectFactory::createNewPenguin(){
 // 	return new Penguin(mSceneMgr, mPhysics, mCallbackAddBall);
 // }
@@ -40,6 +48,10 @@ Goal* WorldObjectFactory::createNewGoal(){
 	return new Goal(mSceneMgr, mPhysics);
 }
 
+Goal* WorldObjectFactory::createNewGoalClient(){
+	return new Goal(mSceneMgr, NULL);
+}
+
 Terrain* WorldObjectFactory::createNewTerrain(){
 	return new Terrain(mSceneMgr, mPhysics);
 }
diff --git a/WorldObjectFactory.hpp b/WorldObjectFactory.hpp
index 1d96aff..038bb05 100644
--- a/WorldObjectFactory.hpp
+++ b/WorldObjectFactory.hpp
@@ -20,9 +20,16 @@ public:
 	Ball* createNewBall();
 	Ball* createNewBall(Penguin* penguin);
 	Ball* createNewBall(float, float, float);
+	Ball* createNewBallClient();
+
 	Room* createNewRoom();
+	Room* createNewRoomClient();
+
 	Penguin* createNewPenguin(MyController*, cCallback*);
+
 	Goal* createNewGoal();
+	Goal* createNewGoalClient();
+
 	Terrain* createNewTerrain();
 
 private:
diff --git a/WorldObjectPenguin.cpp b/WorldObjectPenguin.cpp
index 8c207eb..b584691 100644
--- a/WorldObjectPenguin.cpp
+++ b/WorldObjectPenguin.cpp
@@ -4,6 +4,9 @@
 Penguin::Penguin(MyController* controller, cCallback* callbackAddBall){
 	mController = controller;
 	mCallbackAddBall = callbackAddBall;
+
+	penguin_direction = Ogre::Vector3(0,0,-1);
+	previous_direction = Ogre::Vector3(0,0,-1);
 }
 
 Penguin::Penguin(Ogre::SceneManager* m_pSceneMgr, PhysicsWrapper* physics, MyController* controller) : WorldObjectAbstract()
@@ -15,15 +18,6 @@ Penguin::Penguin(Ogre::SceneManager* m_pSceneMgr, PhysicsWrapper* physics, MyCon
 		attachToDynamicWorld(physics);
 }
 
-Penguin::Penguin(Ogre::SceneManager* m_pSceneMgr, PhysicsWrapper* physics) : WorldObjectAbstract()
-{
-
-	createPenguin(m_pSceneMgr);
-
-	if(physics != NULL)
-		attachToDynamicWorld(physics);
-}
-
 Penguin::~Penguin()
 {
 }
@@ -84,48 +78,36 @@ void Penguin::createPenguin(Ogre::SceneManager* m_pSceneMgr)
 	worldObjectSceneNode->yaw( Ogre::Degree( -180 ) );
 	penguin_direction = Ogre::Vector3(0,0,-1);
 	previous_direction = Ogre::Vector3(0,0,-1);
-
-	/*Ogre::Camera* camera = m_pSceneMgr->getCamera("Camera");
-	camera->setPosition(worldObjectSceneNode->getPosition());
-	camera->setDirection(penguin_direction);*/
-
 }
 
-void Penguin::update(double timeSinceLastFrame, MyController* controller, Ogre::Camera* camera)
+void Penguin::update(double timeSinceLastFrame, Ogre::Camera* camera)
 {
 	// We cap the timeSinceLastFrame to avoid
 	// huge time steps
 	if(timeSinceLastFrame > 0.4f)
 		timeSinceLastFrame = 0.4f;
 
-	// 'vec' is passed around to different functions to be modified
-	// At the end of update, 'pos' is put back into the btTransform
-	btTransform trans;
-    worldObjectRigidBody->getMotionState()->getWorldTransform(trans);
-	Ogre::Vector3 pos = Ogre::Vector3(trans.getOrigin().getX(), trans.getOrigin().getY(), trans.getOrigin().getZ());
-
-	// Factor in Gravity
-	// new penguin position is put in pos
-	handleGravity(timeSinceLastFrame, &pos);
+	Ogre::Vector3 pos = getVisualPosition();		// pos will be passed around and updated before being synced
 
-	// Handle Wall and Ceiling Collisions
-	// new penguin position is put in pos
-	handleCollisions(&pos);
+	handleGravity(timeSinceLastFrame, &pos);		// Factor in Gravity
+	handleCollisions(&pos);							// Handle Ground Collision
+	processController(timeSinceLastFrame, &pos); 	// Process User Input to move player
+	animate(timeSinceLastFrame);					// Animate Penguin
 
-	// Process User Input to move player
-	// new penguin position is put in pos
-	processController(timeSinceLastFrame, &pos);
+	syncPenguin(pos);	// Sync Visuals: DO NOT USE the parent's updateWorldObjectVisual
+	updateCamera(camera);
+}
 
-	// Animate Penguin
-	animate(timeSinceLastFrame);	
+void Penguin::updateAsClient(Ogre::Vector3 pos, Ogre::Quaternion rot, Ogre::Camera* camera)
+{
+	WorldObjectAbstract::updateAsClient(pos, rot);
+	//animate(timeSinceLastFrame);
 
-	// Sync Visuals: We don't use the parent's updateWorldObjectVisual
-	// to sync because that method is for objects not under user control
-	trans.setOrigin(btVector3(pos[0], pos[1], pos[2]));
-	penguinMotionState->setWorldTransform(trans);
-	worldObjectSceneNode->setPosition(pos[0], pos[1], pos[2]);
+	updateCamera(camera);					
+}
 
-	// Modify Camera
+void Penguin::updateCamera(Ogre::Camera* camera){
+	Ogre::Vector3 pos = getVisualPosition();
 	if(mController->thirdPersonCameraOn() && camera != NULL){
 		Ogre::Vector3 cameraPosition;
 		Ogre::Vector3 cameraDirection;
@@ -136,7 +118,16 @@ void Penguin::update(double timeSinceLastFrame, MyController* controller, Ogre::
 		cameraPosition.y += 7;
 		camera->setPosition(cameraPosition);
 	}
+}
 
+// ====================================
+// Private Methods
+// ====================================
+void Penguin::syncPenguin(Ogre::Vector3 pos){
+	btTransform trans;
+	trans.setOrigin(btVector3(pos[0], pos[1], pos[2]));
+	penguinMotionState->setWorldTransform(trans);
+	worldObjectSceneNode->setPosition(pos[0], pos[1], pos[2]);
 }
 
 void Penguin::processController(double timeSinceLastFrame, Ogre::Vector3* pos)
@@ -174,7 +165,6 @@ void Penguin::processController(double timeSinceLastFrame, Ogre::Vector3* pos)
 	}
 
 	// Up and Down on the keyboard will move Penguin forwards and backwards
-
 	if(mController->forward_control_down == true){
 		*pos = *pos + (penguin_direction * move_vel * timeSinceLastFrame) * (boost_modifier);
 		//worldObjectRigidBody->setLinearVelocity(btVector3(100,100, 100));
@@ -190,11 +180,12 @@ void Penguin::processController(double timeSinceLastFrame, Ogre::Vector3* pos)
 	if(mController->jump_control_down == true){
 		mController->jump_control_down = false;
 		penguin_velocity[1] = jump_vel;
+	}	
+	if( mController->left_mouse_button_down == true) {
+		mController->left_mouse_button_down = false;
+		fireWeapon();
 	}
 
-	//cout << worldObjectRigidBody->getLinearVelocity().getX() << endl;
-	// Mouse controls
-	
 	if(mController->mouse_x_movement != 0.0000 ) {
 		quat = Ogre::Quaternion(Ogre::Radian(Ogre::Degree( 0.15f*mController->mouse_x_movement)), Ogre::Vector3::UNIT_Y);
 		worldObjectSceneNode->rotate(quat);
@@ -203,24 +194,16 @@ void Penguin::processController(double timeSinceLastFrame, Ogre::Vector3* pos)
 		penguin_direction.normalise();
 		previous_direction = penguin_direction;
 		mController->mouse_x_movement = 0.0;
-	
-	}
-	
-	if( mController->left_mouse_button_down == true) {
-		mController->left_mouse_button_down = false;
-		fireWeapon();
 	}
 }
 
 
-void Penguin::fireWeapon() {
-
+void Penguin::fireWeapon(){
 	char s8_Out[50];
 	mCallbackAddBall->Execute((void*)s8_Out);
 }
 
-void Penguin::handleGravity(double timeSinceLastFrame, Ogre::Vector3* pos)
-{
+void Penguin::handleGravity(double timeSinceLastFrame, Ogre::Vector3* pos){
 		penguin_velocity[1] = penguin_velocity[1] + world_grav * timeSinceLastFrame;
 		// if penguin is falling too fast
 		if(penguin_velocity[1] < max_fall_vel)
@@ -228,27 +211,7 @@ void Penguin::handleGravity(double timeSinceLastFrame, Ogre::Vector3* pos)
 		(*pos)[1] =  (*pos)[1] + penguin_velocity[1] * timeSinceLastFrame + (0.5) * world_grav * timeSinceLastFrame * timeSinceLastFrame;
 }
 
-void Penguin::handleCollisions(Ogre::Vector3* pos)
-{
-	// if((*pos)[0] < -room_width/2 + penguin_length/2)
-	// 	(*pos)[0] = -room_width/2 + penguin_length/2;
-
-	// if((*pos)[0] > room_width/2 - penguin_length/2)
-	// 	(*pos)[0] = room_width/2 - penguin_length/2;
-
-
-	// if((*pos)[1] > room_width/2 - penguin_length/2)
-	// 	(*pos)[1] = room_width/2 - penguin_length/2;
-
-
-	// if((*pos)[2] < -room_length/2 + penguin_length/2)
-	// 	(*pos)[2] = -room_length/2 + penguin_length/2;
-
-
-	// if((*pos)[2] > room_length/2 - penguin_length/2)
-	// 	(*pos)[2] = room_length/2 - penguin_length/2;
-
-
+void Penguin::handleCollisions(Ogre::Vector3* pos){
 	// If penguin touches the ground, change the penguin to ground state
 	if((*pos)[1] < -room_width/2 + penguin_length/2){
 		(*pos)[1] = -room_width/2 + penguin_length/2;
@@ -259,11 +222,9 @@ void Penguin::handleCollisions(Ogre::Vector3* pos)
 	}
 }
 
-void Penguin::animate(double timeSinceLastFrame)
-{
+void Penguin::animate(double timeSinceLastFrame){
 	// Animation
-	if(mController->boost_control_down == true)
-	{
+	if(mController->boost_control_down == true){
 		mAnimationState = penguinEntity->getAnimationState("amuse");
         mAnimationState->setLoop(true);
         mAnimationState->setEnabled(true);
@@ -277,8 +238,7 @@ void Penguin::animate(double timeSinceLastFrame)
 		mController->bottom_control_down == true ||
 		mController->forward_control_down == true ||
 		mController->backward_control_down == true
-		)
-	{
+		){
 		mAnimationState = penguinEntity->getAnimationState("amuse");
         mAnimationState->setLoop(true);
         mAnimationState->setEnabled(true);
@@ -317,8 +277,6 @@ void Penguin::createSceneNode(Ogre::SceneManager* m_pSceneMgr)
  	unique_id_string = out.str();
 	std::string penguin_name = "penguin" + unique_id_string;
 
-	//std::cout << penguin_name << std::endl;
-
 	penguinEntity = m_pSceneMgr->createEntity(penguin_name, "penguin.mesh");
 	worldObjectSceneNode = m_pSceneMgr->getRootSceneNode()->createChildSceneNode(penguin_name);
 	worldObjectSceneNode->attachObject(penguinEntity);
@@ -326,8 +284,6 @@ void Penguin::createSceneNode(Ogre::SceneManager* m_pSceneMgr)
 	worldObjectSceneNode->setPosition(vec[0], vec[1], vec[2]);
 	penguinEntity->setMaterialName("Penguin");
 	worldObjectSceneNode->yaw( Ogre::Degree( -180 ) );
-	penguin_direction = Ogre::Vector3(0,0,-1);
-	previous_direction = Ogre::Vector3(0,0,-1);
 }
 
 void Penguin::createRigidBody(PhysicsWrapper* physics)
diff --git a/WorldObjectPenguin.hpp b/WorldObjectPenguin.hpp
index de60526..fc0130d 100644
--- a/WorldObjectPenguin.hpp
+++ b/WorldObjectPenguin.hpp
@@ -18,18 +18,16 @@ public:
 	Penguin(MyController*, cCallback*);
 
 	Penguin(Ogre::SceneManager*, PhysicsWrapper*, MyController*);				// To be deleted
-	Penguin(Ogre::SceneManager*, PhysicsWrapper*);				// To be deleted
 	~Penguin();
 
 	btDefaultMotionState* 	penguinMotionState;
 	Ogre::Entity* 			penguinEntity;
 	Ogre::AnimationState*	mAnimationState;
 
-	void update(double, MyController*, Ogre::Camera*);
-	void updateCamera(Ogre::Camera*);
-
-	Ogre::Vector3 			getPenguinDirection();
+	void update(double, Ogre::Camera*);
+	void updateAsClient(Ogre::Vector3, Ogre::Quaternion, Ogre::Camera*);
 
+	Ogre::Vector3 getPenguinDirection();
 
 	static Penguin* createNewPenguin(Ogre::SceneManager*, PhysicsWrapper*, MyController*, cCallback*);
 protected:
@@ -50,13 +48,16 @@ private:
 
 	btCollisionShape* 		penguin_collision_shape;
 
-	void createPenguin(Ogre::SceneManager*);
+	void syncPenguin(Ogre::Vector3);		
+	void updateCamera(Ogre::Camera*);
 
 	void processController(double, Ogre::Vector3*);
 	void handleGravity(double, Ogre::Vector3*);
 	void handleCollisions(Ogre::Vector3*);
 	void animate(double);
 	void fireWeapon();
+
+	void createPenguin(Ogre::SceneManager*); // To Be Deleted
 };
 
 //|||||||||||||||||||||||||||||||||||||||||||||||
diff --git a/WorldServer.cpp b/WorldServer.cpp
deleted file mode 100644
index 5cdfb26..0000000
--- a/WorldServer.cpp
+++ /dev/null
@@ -1,48 +0,0 @@
-#include "WorldServer.hpp"
-
-WorldServer::WorldServer(Ogre::SceneManager* sceneMgr, PhysicsWrapper* physics, MyController* controller)
-{
-	mSceneMgr = sceneMgr;
-	mPhysics = physics;
-	i_callbackAddBall.SetCallback(this, &WorldServer::CallbackAddBall);
-
-	worldObjectFactory = new WorldObjectFactory(mSceneMgr, mPhysics);	// World Object Factory
-
-	// ball = worldObjectFactory->createNewBall(0, 100, 0); 							// Create Ball
-	// ball2 = worldObjectFactory->createNewBall(0, 200, 0); 							// Create Ball
-	room = worldObjectFactory->createNewRoom(); 										// Create Room
-	penguin =  worldObjectFactory->createNewPenguin(controller, &i_callbackAddBall);	// Create Penguin
-	goal = worldObjectFactory->createNewGoal(); 										// Create Goal
-	// terrain = worldObjectFactory->createNewTerrain(); 								// Create Terrain
-
-	world_objects.push_back(worldObjectFactory->createNewBall(0, 10, 0));
-}
-
-WorldServer::~WorldServer()
-{
-	
-}
-
-void WorldServer::update(double timeSinceLastFrame, MyController* controller, Ogre::Camera* camera)
-{
-	/* Update Physics Engine */
-	if (timeSinceLastFrame!=0){
-		mPhysics->stepPhysics(timeSinceLastFrame, 5);
-	}
-
-	/* Update Players */
-	penguin->update(timeSinceLastFrame, controller, camera);
-
-	// /* Update World Objects */
-	for(int i=0; i<world_objects.size(); ++i){
-		world_objects[i]->update();
-	}
-}
-
-
-/* Callback Function */
-bool WorldServer::CallbackAddBall(void *Param)
-{
-	world_objects.push_back(worldObjectFactory->createNewBall(penguin));
-	return true;
-}
diff --git a/WorldServer.hpp b/WorldServer.hpp
deleted file mode 100644
index 717018a..0000000
--- a/WorldServer.hpp
+++ /dev/null
@@ -1,52 +0,0 @@
-
-//|||||||||||||||||||||||||||||||||||||||||||||||
- 
-#ifndef WORLD_SERVER_HPP
-#define WORLD_SERVER_HPP
- 
-//|||||||||||||||||||||||||||||||||||||||||||||||
-
-
-#include "WorldObjectFactory.hpp"
-#include "Controller.hpp"
-
-#include "Callback.h"
-
-class WorldServer
-{
-public:
-	WorldServer(Ogre::SceneManager*, PhysicsWrapper*, MyController*);
-	~WorldServer();
-
-	void update(double, MyController*, Ogre::Camera*);
-
-	Ogre::SceneManager*		mSceneMgr;
-	PhysicsWrapper*			mPhysics;
-
-	// ===============================
-	// World Object
-	// ===============================
-
-	WorldObjectFactory* 				worldObjectFactory;
-
-	Ball*								ball;
-	Ball*								ball2;
-	Room*								room;
-	Paddle*								paddle;
-	Penguin*							penguin;
-	Goal*								goal;
-	Terrain*							terrain;
-
-	vector<WorldObjectAbstract*> 		world_objects;
-	vector<Penguin*>			 		penguin_clients;
-
-	/* Callback Function */
-	TCallback<WorldServer> i_callbackAddBall;
-	bool CallbackAddBall(void *Param);
-};
-
-//|||||||||||||||||||||||||||||||||||||||||||||||
-
-#endif
- 
-//|||||||||||||||||||||||||||||||||||||||||||||||
